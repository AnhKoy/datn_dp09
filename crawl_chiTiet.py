#============================================================================================================================
import sys
import io

from sqlalchemy import true
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.wait import WebDriverWait
import selenium.webdriver.support.expected_conditions as EC
import undetected_chromedriver as uc
import time
import numpy as np
import pandas as pd
from urllib.parse import urlparse, parse_qs, unquote
import re
import unicodedata

#=============================================================================================================================

# C·∫•u h√¨nh Chrome
options = uc.ChromeOptions()
options.add_argument("--headless=new")  # KH√îNG n√™n b·∫≠t headless khi test, h√£y ƒë·ªÉ m·ªü
options.add_argument("--start-maximized")
options.add_argument("--disable-infobars")
options.add_argument("--window-size=1920,1080")
options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36")

options.add_argument("--disable-extensions")
options.add_argument("--disable-gpu")
options.add_argument("--no-sandbox")
options.add_argument("--disable-dev-shm-usage")
options.add_argument("--disable-blink-features=AutomationControlled")
options.add_argument("--ignore-certificate-errors")
options.add_argument("--ignore-ssl-errors")

# s·ª≠a ƒë√∫ng ƒë∆∞·ªùng d·∫´n file chromedriver
driver = uc.Chrome(driver_executable_path=r"E:\DATA\DuAn\BatDongSan\drivers\chromedriver-win64\chromedriver.exe",
                   options=options,
                   headless=true)

# --------------------
# H√ÄM L·∫§Y TH√îNG TIN CHI TI·∫æT T·ª™ TRANG BDS
import time
import pandas as pd
import numpy as np
import undetected_chromedriver as uc
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC



def create_driver():
    options = uc.ChromeOptions()
    options.add_argument("--headless=new")  # Ch·∫°y ·∫©n
    options.add_argument("--disable-gpu")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--disable-blink-features=AutomationControlled")
    options.add_argument("--disable-extensions")
    options.add_argument("--disable-infobars")
    options.add_argument("--window-size=1920,1080")
    options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36")
    options.page_load_strategy = 'normal'
    
    return uc.Chrome(driver_executable_path=r"E:\DATA\DuAn\BatDongSan\drivers\chromedriver-win64\chromedriver.exe",
                     options=options,
                     headless=true)

# Kh·ªüi t·∫°o driver l·∫ßn ƒë·∫ßu
driver = create_driver()

# --------------------
# H√ÄM L·∫§Y TH√îNG TIN CHI TI·∫æT T·ª™ TRANG BDS
# --------------------
def extract_property_info(url):
    info = {
        'Link': url,
        'Ti√™u ƒë·ªÅ': np.nan,
        'ƒê·ªãa ch·ªâ': np.nan,
        #'M√¥ t·∫£': np.nan,
        'M·ª©c gi√°': np.nan,
        'Gi√°/m¬≤': np.nan,
        'Di·ªán t√≠ch': np.nan,
        'S·ªë ph√≤ng ng·ªß': np.nan,
        'S·ªë ph√≤ng t·∫Øm, v·ªá sinh': np.nan,
        'Ph√°p l√Ω': np.nan,
        'N·ªôi th·∫•t': np.nan,
        'S·ªë t·∫ßng': np.nan,
        'M·∫∑t ti·ªÅn': np.nan,
        'ƒê∆∞·ªùng v√†o': np.nan,
        'H∆∞·ªõng nh√†': np.nan,
        'H∆∞·ªõng ban c√¥ng': np.nan,
        'Ng√†y ƒëƒÉng': np.nan,
        # 'Huy·ªán': np.nan,
        # 'Latitude': np.nan,
        # 'Longitude': np.nan
    }

    try:
        driver.get(url)
        WebDriverWait(driver, 15).until(
            EC.presence_of_element_located((By.CLASS_NAME, "re__pr-specs-content-item-value"))
        )

        # Ti√™u ƒë·ªÅ
        try:
            info['Ti√™u ƒë·ªÅ'] = driver.find_element(By.CLASS_NAME, "re__pr-title").text.strip()
        except: pass

        # ƒê·ªãa ch·ªâ
        try:
            info['ƒê·ªãa ch·ªâ'] = driver.find_element(By.CLASS_NAME, "re__pr-short-description").text.strip()
        except: pass

        # M·ª©c gi√° + Gi√°/m2
        try:
            info['M·ª©c gi√°'] = driver.find_element(By.CSS_SELECTOR, ".re__pr-short-info-item .value").text.strip()
            info['Gi√°/m¬≤'] = driver.find_element(By.CSS_SELECTOR, ".re__pr-short-info-item .ext").text.strip()
        except: pass

        # Ng√†y ƒëƒÉng
        try:
            date_el = driver.find_element(By.XPATH, "//span[@class='title' and contains(text(),'Ng√†y ƒëƒÉng')]/following-sibling::span[@class='value']")
            info['Ng√†y ƒëƒÉng'] = date_el.text.strip()
        except: pass

        # # Breadcrumb l·∫•y huy·ªán
        # try:
        #     crumbs = driver.find_elements(By.CSS_SELECTOR, ".re__breadcrumb .re__link-se")
        #     huyen = next((b.text.strip() for b in crumbs if b.get_attribute("level") == "3"), np.nan)
        #     info["Huy·ªán"] = huyen
        # except: pass

        # M√¥ t·∫£
        # try:
        #     des = driver.find_element(By.CLASS_NAME, "re__pr-description").text.strip()
        #     info["M√¥ t·∫£"] = des
        # except: pass

        # T·ªça ƒë·ªô
        # try:
        #     iframe = driver.find_element(By.CSS_SELECTOR, "iframe.lazyload")
        #     data_src = iframe.get_attribute("data-src")
        #     lat, lon = data_src.split("q=")[1].split(",")
        #     info["Latitude"] = lat.strip()
        #     info["Longitude"] = lon.strip()
        # except: pass

        # C√°c tr∆∞·ªùng trong block th√¥ng tin chi ti·∫øt
        specs = driver.find_elements(By.CLASS_NAME, "re__pr-specs-content-item")
        for spec in specs:
            try:
                title = spec.find_element(By.CLASS_NAME, "re__pr-specs-content-item-title").text.strip()
                value = spec.find_element(By.CLASS_NAME, "re__pr-specs-content-item-value").text.strip()
                if title in info:
                    info[title] = value
            except: pass

        return info
    
    except Exception as e:
        print(f"‚ùå L·ªói khi t·∫£i {url} - {str(e)}")
        return info


# --------------------
# ƒê·ªåC LINK T·ª™ FILE
# --------------------
# ƒê·ªçc danh s√°ch URL t·ª´ file hrefs.txt
with open("E:\\DATA\\DuAn\\BatDongSan\\n8n\\hrefs.txt", "r", encoding="utf-8") as file:
    urls = file.read().splitlines()

# Lo·∫°i b·ªè c√°c link tr√πng l·∫∑p
urls = list(dict.fromkeys(urls))


# ƒê∆∞·ªùng d·∫´n file CSV ƒë·ªÉ l∆∞u k·∫øt qu·∫£
csv_filename = "E:\\DATA\\DuAn\\BatDongSan\\n8n\\data_bds.csv"
total_urls = len(urls)

def normalize_column_name(col):
    # Lo·∫°i b·ªè d·∫•u ti·∫øng Vi·ªát
    col = unicodedata.normalize('NFD', col)
    col = ''.join([c for c in col if unicodedata.category(c) != 'Mn'])
    col = col.strip().lower()
    col = re.sub(r"[^\w\s]", "", col)  # Lo·∫°i b·ªè k√Ω t·ª± ƒë·∫∑c bi·ªát
    col = re.sub(r"\s+", "_", col)     # Thay kho·∫£ng tr·∫Øng b·∫±ng _
    return col

def normalize_columns(df):
    df.columns = [normalize_column_name(col) for col in df.columns]
    return df

# --------------------
# GHI T·ª™NG D√íNG V√ÄO CSV
# --------------------
for index, url in enumerate(urls, start=1):
    try:
        print(f"üìå ƒêang x·ª≠ l√Ω link th·ª© {index}/{total_urls}: {url}")
        property_info = extract_property_info(url)
        df = pd.DataFrame([property_info])
        df = normalize_columns(df)  # Chu·∫©n h√≥a t√™n c·ªôt

        # Ghi l·∫ßn ƒë·∫ßu c√≥ header
        if index == 1:
            df.to_csv(csv_filename, mode='w', header=True, index=False, encoding='utf-8-sig')
        else:
            df.to_csv(csv_filename, mode='a', header=False, index=False, encoding='utf-8-sig')

        print(f"‚úÖ ƒê√£ l∆∞u th√¥ng tin v√†o file: {csv_filename}")
        time.sleep(1)

    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói khi x·ª≠ l√Ω link th·ª© {index}: {str(e)}")
        try:
            driver.quit()
        except:
            pass
        driver = create_driver()

# --------------------
driver.quit()
print(f"\nüéâ ƒê√£ crawl xong to√†n b·ªô {total_urls} link v√† l∆∞u v√†o {csv_filename}")
